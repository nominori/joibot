from aiogram import Bot, Dispatcher, executor, types
from pycoingecko import CoinGeckoAPI
import logging
from time import sleep, strftime
import Buttons as Bt
from maintoken import TOKEN
import userdata as data

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
cg = CoinGeckoAPI()

names_dict = {'BTC': 'Bitcoin', 'ETH': 'Ethereum', 'BNB': 'Binance Coin', 'LTC': 'Litecoin', 'DOGE': 'Dogecoin',
              'XRP': 'Ripple', 'ADA': 'Cardano', 'SOL': 'Solana', 'DOT': 'Polkadot', 'TRX': 'Tron',
              'LINK': 'Chainlink', 'NEAR': 'Near Protocol', 'MATIC': 'Polygon', 'ATOM': 'Cosmos',
              'AVAX': 'Avalanche', 'UNI': 'Uniswap'}
big_dict = {
    'ukr': {'start': '–ü—Ä–∏–≤—ñ—Ç, —è JoiCryptoBot\n–©–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –º–æ—ó –∫–æ–º–∞–Ω–¥–∏ —Ç–∞ –ø–æ—á–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å, –Ω–∞–ø–∏—à—ñ—Ç—å /about',
            'about': '–ù–∞–ª–∞—à—Ç—É–π –º–æ–≤—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /language\n–í–≤–µ–¥–∏ /list —â–æ–± –æ–±—Ä–∞—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏\n'
                     '1 –∫–ª—ñ–∫ - –í–∏–±—Ä–∞—Ç–∏\n2 –∫–ª—ñ–∫ - –í–∏–¥–∞–ª–∏—Ç–∏\n‚¨ÖÔ∏è - –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥\nALL‚ûï - –û–±—Ä–∞—Ç–∏ –≤—Å–µ\n'
                     'ALL‚ûñ - –û—á–∏—Å—Ç–∏—Ç–∏ —Å–ø–∏—Å–æ–∫\nüìà - –í–∏–≤–µ—Å—Ç–∏ –∫—É—Ä—Å\n'
                     '–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ –ª–∏—à–µ –æ–¥–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É - /one\n\n'
                     '<b>–Ø–∫ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∫—É—Ä—Å –≤—ã–±—Ä–∞–Ω–∏—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –ø–æ—Å—Ç—ñ–π–Ω–æ?</b>\n'
                     '–í–≤–µ–¥—ñ—Ç—å /edit —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Ç–∞ —á–∞—Å—Ç–æ—Ç—É –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫—É—Ä—Å—É, –∞ –ø–æ—Ç—ñ–º –Ω–∞–ø–∏—Å–Ω—ñ—Ç—å:\n'
                     'üìÇ - –ó–º—ñ–Ω–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n'
                     'üïë - –ó–º—ñ–Ω–∏—Ç–∏ —á–∞—Å—Ç–æ—Ç—É\n'
                     '/commands - –£—Å—ñ –∫–æ–º–∞–Ω–¥–∏\n',
            'commands': '<b>–ö–æ–º–∞–Ω–¥–∏</b>\n/about - –Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –±–æ—Ç–∞\n/language - –û–±—Ä–∞—Ç–∏ –º–æ–≤—É\n'
                        '/list - C–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n/one - –û–±—Ä–∞—Ç–∏ –æ–¥–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É\n'
                        '/edit - –ó–º—ñ–Ω–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç/—á–∞—Å—Ç–æ—Ç—É –≤—ñ–¥–ø—Ä–∞–≤–∫–∏',
            'list': '–û–±–µ—Ä—ñ—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏',
            'one': '–û–±–µ—Ä—ñ—Ç—å 1 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É',
            'edit': ['–ó–º—ñ–Ω–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç/—á–∞—Å—Ç–æ—Ç—É', 'C–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:', '–ß–∞—Å—Ç–æ—Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:'],
            'setlist': '–û–±–µ—Ä—ñ—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏',
            'settime': '–û–±–µ—Ä—ñ—Ç—å —á–∞—Å—Ç–æ—Ç—É',
            'wait': '–ü–æ—á–µ–∫–∞–π—Ç–µ 5 —Å–µ–∫...',
            'language': '–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É',
            'choice': '–ú–æ–≤–∞ –æ–±—Ä–∞–Ω–∞üá∫üá¶',
            'times': [['—Ö–≤', '—Ö–≤', '—Ö–≤'], ['—Ö–≤', '–≥–æ–¥', '–≥–æ–¥'], ['–≥–æ–¥', '–≥–æ–¥', '–≥–æ–¥']],
            'lang_time': {'10': ' —Ö–≤', '20': ' —Ö–≤', '30': ' —Ö–≤', '45': ' —Ö–≤',
                          '1 ': '–≥–æ–¥', '3 ': '–≥–æ–¥', '6 ': '–≥–æ–¥', '12': ' –≥–æ–¥', '24': ' –≥–æ–¥'}
            },
    'rus': {'start': '–ü—Ä–∏–≤–µ—Ç, —è JoiCryptoBot\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ /about',
            'about': '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —è–∑—ã–∫ —Å –ø–æ–º–æ—â—å—é /language\n–í–≤–µ–¥–∏—Ç–µ /list —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n'
                     '1 –∫–ª–∏–∫ ‚Äì –í—ã–±—Ä–∞—Ç—å\n2 –∫–ª–∏–∫ - –£–¥–∞–ª–∏—Ç—å\n‚¨ÖÔ∏è - –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥\nALL‚ûï - –í—ã–±—Ä–∞—Ç—å –≤—Å–µ\n'
                     'ALL‚ûñ - –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫\nüìà - –í—ã–≤–µ—Å—Ç–∏ –∫—É—Ä—Å\n'
                     '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É - /one\n\n'
                     '<b>–ö–∞–∫ –ø–æ–ª—É—á–∞—Ç—å –∫—É—Ä—Å –≤—ã–±—Ä–∞–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ?</b>\n'
                     '–í–≤–µ–¥—ã—Ç—å /edit —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ —á–∞—Å—Ç–æ—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—É—Ä—Å–∞, –∞ –ø–æ—Ç–æ–º –Ω–∞–∂–º–∏—Ç–µ:\n'
                     'üìÇ - –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n'
                     'üïë - –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É\n'
                     '/commands - –í—Å–µ –∫–æ–º–∞–Ω–¥—ã\n',
            'commands': '<b>–ö–æ–º–∞–Ω–¥—ã</b>\n/about - –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞\n/language - –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫\n'
                        '/list - C–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n/one - –í—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É\n'
                        '/edit - –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç/—á–∞—Å—Ç–æ—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏',
            'list': '–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏–∏',
            'one': '–í—ã–±–µ—Ä–∏—Ç–µ 1 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É',
            'edit': ['–ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É/—Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç', '–°–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:', '–ß–∞—Å—Ç–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:'],
            'setlist': '–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏',
            'settime': '–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É',
            'wait': '–ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫...',
            'language': '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫',
            'choice': '–Ø–∑—ã–∫ –≤—ã–±—Ä–∞–Ωüá∑üá∫',
            'times': [['–º', '–º', '–º'], ['–º', '—á', '—á'], ['—á', '—á', '—á']],
            'lang_time': {'10': ' –º', '20': ' –º', '30': ' –º', '45': ' –º',
                          '1 ': '—á', '3 ': '—á', '6 ': '—á', '12': ' —á', '24': ' —á'}
            },
    'eng': {'start': 'Hi, I am JoiCryptoBot\nTo know my commands and start using me, tap /about',
            'about': 'Set the language using /language\nEnter /list to select the desired cryptocurrencies\n'
                     '1 click - Select\n2 click - Delete\n‚¨ÖÔ∏è - Turn back\nALL‚ûï - Select all\n'
                     'ALL‚ûñ - Clear the list\nüìà - Display exchange rate\n'
                     'If you want to choice only one cryptocurrency - /one\n\n'
                     '<b>How to get the cryptocurrencies exchange rate constantly?</b>\n'
                     'Enter /edit to set list and frequency\n'
                     'üìÇ - To set list\n'
                     'üïë - To set frequency\n'
                     '/commands - All commands\n',
            'commands': '<b>Commands</b>\n/about - How to use bot\n/language - Select Language\n'
                        '/list - Cryptocurrency list\n/one - Choice one cryptocurrency\n/edit - Set list/frequency',
            'list': 'Choice cryptocurrency',
            'one': 'Choice 1 cryptocurrency',
            'edit': ['Set list/frequency', 'Cryptocurrency list:', 'Send frequency:'],
            'setlist': 'Choice cryptocurrencies',
            'settime': 'Choice frequency',
            'wait': 'Wait 5 sec...',
            'language': 'Choice language',
            'choice': 'Language selectedüá¨üáß',
            'times': [['min', 'min', 'min'], ['min', 'hr', 'hr'], ['hr', 'hr', 'hr']],
            'lang_time': {'10': ' min', '20': ' min', '30': ' min', '45': ' min',
                          '1 ': 'hr', '3 ': 'hr', '6 ': 'hr', '12': ' hr', '24': ' hr'}
            }}
time_buttons = [['üîü', '2Ô∏è‚É£0Ô∏è‚É£', '3Ô∏è‚É£0Ô∏è‚É£'], ['4Ô∏è‚É£5Ô∏è‚É£', '1Ô∏è‚É£', '3Ô∏è‚É£'], ['6Ô∏è‚É£', '1Ô∏è‚É£2Ô∏è‚É£', '2Ô∏è‚É£4Ô∏è‚É£']]
time_buttons1 = [['10', '20', '30'], ['45', '1', '3'], ['6', '12', '24']]
minutes = {'10': '10', '20': '20', '30': '30', '45': '45',
           '1 ': '60', '3 ': '180', '6 ': '360', '12': '720', '24': '1440'}


@dp.message_handler(commands=['about', 'commands', 'list', 'edit', 'one', 'language', 'start'])
async def do(message: types.Message):
    data.add_user(user_id=message.from_user.id)
    """data.add_user_detail(user_id=message.from_user.id, user_username=("@" + str(message.from_user.username)),
                         command=message.text[1:], time_=strftime("%b/%d/%Y %H:%M:%S"))"""
    language = data.get_data(user_id=message.from_user.id, target='language')
    await message.delete()
    if message.text[1:] == 'one':
        await message.answer('‚ú®')
        await message.answer(big_dict[language][message.text[1:]], reply_markup=Bt.OneListMenu)
    elif message.text[1:] == 'language':
        await message.answer('‚ú®')
        await message.answer(big_dict[language][message.text[1:]], reply_markup=Bt.LanguageMenu)
    elif message.text[1:] == 'list':
        cc_name_list = data.get_data(user_id=message.from_user.id, target='list_0')
        for i in range(4):
            for j in range(4):
                name = Bt.ListMenu["inline_keyboard"][i][j]['text']
                if name.replace('‚úÖ', '') in cc_name_list:
                    Bt.ListMenu["inline_keyboard"][i][j]['text'] = f"{name.replace('‚úÖ', '')}‚úÖ"
                else:
                    Bt.ListMenu["inline_keyboard"][i][j]['text'] = name.replace('‚úÖ', '')
        await message.answer('‚ú®')
        await message.answer(big_dict[language][message.text[1:]], reply_markup=Bt.ListMenu)
    elif message.text[1:] == 'edit':
        await message.answer('‚ú®')
        full_list = data.get_data(user_id=message.from_user.id, target='full_list')
        time = data.get_data(user_id=message.from_user.id, target='time')
        if time != '':
            data.change_time(user_id=message.from_user.id, time=time[:2]+big_dict[language]['lang_time'][time[:2]])
            time = data.get_data(user_id=message.from_user.id, target='time')
        await bot.send_message(message.from_user.id, f"{big_dict[language]['edit'][0]}\n{big_dict[language]['edit'][1]} "
                                                     f"{full_list}\n{big_dict[language]['edit'][2]} {time}",
                               reply_markup=Bt.SetMenu)
    else:
        await message.answer(big_dict[language][message.text[1:]], parse_mode='HTML')


@dp.message_handler()
async def delete(message: types.Message):
    await message.delete()


@dp.callback_query_handler(text_contains="cc_")
async def callback_cc(call: types.CallbackQuery):
    language = data.get_data(user_id=call.from_user.id, target='language')
    cc_name_list = data.get_data(user_id=call.from_user.id, target='list_0')
    cc_set_list = data.get_data(user_id=call.from_user.id, target='list')
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.delete_message(call.from_user.id, call.message.message_id - 1)
    if call.data[:4] == 'cc_1':
        for i in range(4):
            for j in range(4):
                name = Bt.ListMenu["inline_keyboard"][i][j]['text']
                if name.replace('‚úÖ', '') in cc_name_list:
                    Bt.ListMenu["inline_keyboard"][i][j]['text'] = f"{name.replace('‚úÖ', '')}‚úÖ"
                else:
                    Bt.ListMenu["inline_keyboard"][i][j]['text'] = name.replace('‚úÖ', '')
        for i in range(4):
            for j in range(4):
                name = Bt.ListMenu["inline_keyboard"][i][j]['text']
                if (call.data == 'cc_1_all' and name[len(name) - 1] != '‚úÖ') or \
                   (call.data == Bt.ListMenu["inline_keyboard"][i][j]['callback_data'] and name[len(name) - 1] != '‚úÖ'):
                    data.change_list_0(user_id=call.from_user.id, list_0=name, target='+')
                    Bt.ListMenu["inline_keyboard"][i][j]['text'] = f"{name}‚úÖ"
                elif (call.data == 'cc_1_remove' and name[len(name) - 1] == '‚úÖ') or \
                     (call.data == Bt.ListMenu["inline_keyboard"][i][j]['callback_data'] and name[len(name) - 1] == '‚úÖ'):
                    data.change_list_0(user_id=call.from_user.id, list_0=name.replace('‚úÖ', ''), target='-')
                    Bt.ListMenu["inline_keyboard"][i][j]['text'] = name.replace('‚úÖ', '')
        await bot.send_message(call.from_user.id, '‚ú®')
        await bot.send_message(call.from_user.id, big_dict[language]['list'], reply_markup=Bt.ListMenu)
    elif call.data[:4] == 'cc_3':
        for i in range(4):
            for j in range(4):
                name = Bt.SetListMenu["inline_keyboard"][i][j]['text']
                if name.replace('‚úÖ', '') in cc_set_list:
                    Bt.SetListMenu["inline_keyboard"][i][j]['text'] = f"{name.replace('‚úÖ', '')}‚úÖ"
                else:
                    Bt.SetListMenu["inline_keyboard"][i][j]['text'] = name.replace('‚úÖ', '')
        for i in range(4):
            for j in range(4):
                name = Bt.SetListMenu["inline_keyboard"][i][j]['text']
                if (call.data == 'cc_3_all' and name[len(name) - 1] != '‚úÖ') or \
                   (call.data == Bt.SetListMenu["inline_keyboard"][i][j]['callback_data'] and name[len(name) - 1] != '‚úÖ'):
                    data.change_list(user_id=call.from_user.id, new=name, target='+')
                    Bt.SetListMenu["inline_keyboard"][i][j]['text'] = f"{name}‚úÖ"
                elif (call.data == 'cc_3_remove' and name[len(name) - 1] == '‚úÖ') or \
                     (call.data == Bt.SetListMenu["inline_keyboard"][i][j]['callback_data'] and name[len(name) - 1] == '‚úÖ'):
                    data.change_list(user_id=call.from_user.id, new=name.replace('‚úÖ', ''), target='-')
                    Bt.SetListMenu["inline_keyboard"][i][j]['text'] = name.replace('‚úÖ', '')
        await bot.send_message(call.from_user.id, '‚ú®')
        await bot.send_message(call.from_user.id, big_dict[language]['list'], reply_markup=Bt.SetListMenu)
    elif call.data[:4] == 'cc_2':
        currency = call.data[5:]
        price = cg.get_price(ids=currency, vs_currencies='usd')[currency]['usd']
        for i in range(4):
            for j in range(4):
                name = Bt.OneListMenu["inline_keyboard"][i][j]['text']
                Bt.OneListMenu["inline_keyboard"][i][j]['text'] = name.replace('‚úÖ', '')
                if call.data == Bt.OneListMenu["inline_keyboard"][i][j]['callback_data']:
                    await bot.send_message(call.from_user.id, '‚ú®')
                    await bot.send_message(call.from_user.id, f'{name} ({names_dict[name]}) - {price} USD\n')


@dp.callback_query_handler(text_contains="back")
async def callback_back(call: types.CallbackQuery):
    cc_name_list = data.get_data(user_id=call.from_user.id, target='list_0')
    time = data.get_data(user_id=call.from_user.id, target='time')
    language = data.get_data(user_id=call.from_user.id, target='language')
    full_list = data.get_data(user_id=call.from_user.id, target='full_list')
    if call.data == 'back':
        await bot.delete_message(call.from_user.id, call.message.message_id)
        await bot.delete_message(call.from_user.id, call.message.message_id - 1)
    elif call.data == 'back_2':
        await bot.delete_message(call.from_user.id, call.message.message_id)
        await bot.delete_message(call.from_user.id, call.message.message_id - 1)
        await bot.send_message(call.from_user.id, '‚ú®')
        await bot.send_message(call.from_user.id, f"{big_dict[language]['edit'][0]}\n{big_dict[language]['edit'][1]} "
                                                  f"{full_list}\n{big_dict[language]['edit'][2]} {time}",
                               reply_markup=Bt.SetMenu)
    elif call.data == 'back_set_list':
        await bot.delete_message(call.from_user.id, call.message.message_id)
        await bot.delete_message(call.from_user.id, call.message.message_id - 1)
        await bot.send_message(call.from_user.id, '‚ú®')
        await bot.send_message(call.from_user.id, f"{big_dict[language]['edit'][0]}\n{big_dict[language]['edit'][1]} "
                                                  f"{full_list}\n{big_dict[language]['edit'][2]} {time}",
                               reply_markup=Bt.SetMenu)
    elif call.data == 'back_set' and time != '' and full_list != '':
        await bot.delete_message(call.from_user.id, call.message.message_id)
        await bot.delete_message(call.from_user.id, call.message.message_id - 1)
        cc_set_list = data.get_data(user_id=call.from_user.id, target='list')
        cc_price_list = {}
        for i in range(4):
            for j in range(4):
                name = Bt.SetListMenu["inline_keyboard"][i][j]['text']
                if name.replace('‚úÖ', '') in cc_set_list:
                    Bt.SetListMenu["inline_keyboard"][i][j]['text'] = f"{name.replace('‚úÖ', '')}‚úÖ"
                else:
                    Bt.SetListMenu["inline_keyboard"][i][j]['text'] = name.replace('‚úÖ', '')
                name = Bt.SetListMenu["inline_keyboard"][i][j]['text']
                if name[len(name) - 1] == '‚úÖ':
                    currency = str(Bt.SetListMenu["inline_keyboard"][i][j]['callback_data'][5:])
                    price = cg.get_price(ids=currency, vs_currencies='usd')[currency]['usd']
                    cc_price_list[name.replace('‚úÖ', '')] = price
        full_list1 = ''
        for i in range(len(cc_set_list)):
            full_list1 = full_list1 + f'{cc_set_list[i]} ({names_dict[cc_set_list[i]]}) - {cc_price_list[cc_set_list[i]]} USD\n'
        await bot.send_message(call.from_user.id, full_list1)
    elif call.data == 'back_send' and cc_name_list != []:
        await bot.delete_message(call.from_user.id, call.message.message_id)
        await bot.delete_message(call.from_user.id, call.message.message_id - 1)
        await bot.send_message(call.from_user.id, big_dict[language]['wait'])
        sleep(5)
        await bot.delete_message(call.from_user.id, call.message.message_id + 1)
        cc_price_list = {}
        for i in range(4):
            for j in range(4):
                name = Bt.ListMenu["inline_keyboard"][i][j]['text']
                if name[len(name) - 1] == '‚úÖ':
                    currency = str(Bt.ListMenu["inline_keyboard"][i][j]['callback_data'][5:])
                    price = cg.get_price(ids=currency, vs_currencies='usd')[currency]['usd']
                    cc_price_list[name.replace('‚úÖ', '')] = price
                    Bt.ListMenu["inline_keyboard"][i][j]['text'] = name.replace('‚úÖ', '')
        full_list = ''
        for i in range(len(cc_name_list)):
            full_list = full_list + f'{cc_name_list[i]} ({names_dict[cc_name_list[i]]}) - {cc_price_list[cc_name_list[i]]} USD\n'
        await bot.send_message(call.from_user.id, '‚ú®')
        await bot.send_message(call.from_user.id, full_list)
        data.clear_data(user_id=call.from_user.id, target='list_0')


@dp.callback_query_handler(text_contains="set_")
async def callback_back(call: types.CallbackQuery):
    language = data.get_data(user_id=call.from_user.id, target='language')
    cc_set_list = data.get_data(user_id=call.from_user.id, target='list')
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.delete_message(call.from_user.id, call.message.message_id - 1)
    await bot.send_message(call.from_user.id, '‚ú®')
    if call.data == 'set_list':
        for i in range(4):
            for j in range(4):
                name = Bt.SetListMenu["inline_keyboard"][i][j]['text']
                if name.replace('‚úÖ', '') in cc_set_list:
                    Bt.SetListMenu["inline_keyboard"][i][j]['text'] = f"{name.replace('‚úÖ', '')}‚úÖ"
                else:
                    Bt.SetListMenu["inline_keyboard"][i][j]['text'] = name.replace('‚úÖ', '')
        await bot.send_message(call.from_user.id, big_dict[language]['setlist'], reply_markup=Bt.SetListMenu)
    elif call.data == 'set_time':
        for i in range(3):
            for j in range(3):
                Bt.SetTimeMenu["inline_keyboard"][i][j]['text'] = time_buttons[i][j] + big_dict[language]['times'][i][j]
                Bt.SetTimeMenu["inline_keyboard"][i][j]['callback_data'] = f"time_{time_buttons1[i][j]} {big_dict[language]['times'][i][j]}"
        await bot.send_message(call.from_user.id, big_dict[language]['settime'], reply_markup=Bt.SetTimeMenu)


@dp.callback_query_handler(text_contains="time_")
async def callback_back(call: types.CallbackQuery):
    language = data.get_data(user_id=call.from_user.id, target='language')
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.delete_message(call.from_user.id, call.message.message_id - 1)
    data.change_time(user_id=call.from_user.id, time=call.data[5:])
    full_list = data.get_data(user_id=call.from_user.id, target='full_list')
    time = data.get_data(user_id=call.from_user.id, target='time')
    await bot.send_message(call.from_user.id, '‚ú®')
    await bot.send_message(call.from_user.id, f"{big_dict[language]['edit'][0]}\n{big_dict[language]['edit'][1]} "
                                              f"{full_list}\n{big_dict[language]['edit'][2]} {time}",
                           reply_markup=Bt.SetMenu)


@dp.callback_query_handler(text_contains="lang")
async def callback_back(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.delete_message(call.from_user.id, call.message.message_id - 1)
    data.change_language(user_id=call.from_user.id, language=call.data[5:])
    language = data.get_data(user_id=call.from_user.id, target='language')
    await bot.send_message(call.from_user.id, big_dict[language]['choice'])


if __name__ == '__main__':
    data.init_db()
    executor.start_polling(dp, skip_updates=True)
