from aiogram import Bot, Dispatcher, executor, types
from pycoingecko import CoinGeckoAPI
import datetime
from time import sleep
import Buttons as Bt
from maintoken import TOKEN

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
cg = CoinGeckoAPI()
check, check2, lang, k = '', '', '', 0
cc_list, cc_list1 = [], []


@dp.message_handler(commands='start')
async def start(message: types.Message):
    global check, check2
    check, check2 = '', ''
    await bot.send_message(message.chat.id, 'Hi, I am JoiCryptoBot\n'
                                            'To know my commands and start using me, tap /about',
                                            reply_markup=Bt.ReplyKeyboardRemove())


@dp.message_handler(commands='about')
async def about(message: types.Message):
    global check, check2
    check, check2 = '', ''
    if lang == 'ukr':
        await bot.send_message(message.chat.id, '–ù–∞–ª–∞—à—Ç—É–π –º–æ–≤—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /language\n'
                                                '–í–≤–µ–¥–∏ /list —â–æ–± –æ–±—Ä–∞—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏\n'
                                                '1 –∫–ª—ñ–∫ - –í–∏–±—Ä–∞—Ç–∏\n'
                                                '2 –∫–ª—ñ–∫ - –í–∏–¥–∞–ª–∏—Ç–∏\n'
                                                '‚¨ÖÔ∏è - –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥\n'
                                                'ALL‚ûï - –û–±—Ä–∞—Ç–∏ –≤—Å–µ\n'
                                                'ALL‚ûñ - –û—á–∏—Å—Ç–∏—Ç–∏ —Å–ø–∏—Å–æ–∫\n'
                                                'üìà - –í–∏–≤–µ—Å—Ç–∏ –∫—É—Ä—Å\n'
                                                '/commands - –£—Å—ñ –∫–æ–º–∞–Ω–¥–∏\n',
                                                reply_markup=Bt.ReplyKeyboardRemove())
    elif lang == 'ru':
        await bot.send_message(message.chat.id, '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —è–∑—ã–∫ —Å –ø–æ–º–æ—â—å—é /language\n'
                                                '–í–≤–µ–¥–∏ /list —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n'
                                                '1 –∫–ª–∏–∫ ‚Äì –í—ã–±—Ä–∞—Ç—å\n'
                                                '2 –∫–ª–∏–∫ - –£–¥–∞–ª–∏—Ç—å\n'
                                                '‚¨ÖÔ∏è - –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥\n'
                                                'ALL‚ûï - –í—ã–±—Ä–∞—Ç—å –≤—Å–µ\n'
                                                'ALL‚ûñ - –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫\n'
                                                'üìà - –í—ã–≤–µ—Å—Ç–∏ –∫—É—Ä—Å\n'
                                                '/commands - –í—Å–µ –∫–æ–º–∞–Ω–¥—ã\n',
                                                reply_markup=Bt.ReplyKeyboardRemove())
    else:
        await bot.send_message(message.chat.id, 'Set the language using /language\n'
                                                'Enter /list to select the desired cryptocurrencies\n'
                                                '1 click - Select\n'
                                                '2 click - Delete\n'
                                                '‚¨ÖÔ∏è - turn back\n'
                                                'ALL‚ûï - select all\n'
                                                'ALL‚ûñ - clear the list\n'
                                                'üìà - display exchange rate\n'
                                                '/commands - All commands\n',
                                                reply_markup=Bt.ReplyKeyboardRemove())


@dp.message_handler(commands=['commands'])
async def commands(message: types.Message):
    global check, check2
    check, check2 = '', ''
    if lang == 'ukr':
        await bot.send_message(message.chat.id, '<b>–ö–æ–º–∞–Ω–¥–∏</b>\n/about - –Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –±–æ—Ç–∞\n'
                                                '/language - –û–±—Ä–∞—Ç–∏ –º–æ–≤—É\n'
                                                '/time - –û–±—Ä–∞—Ç–∏ —á–∞—Å\n'
                                                '/list - C–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n', parse_mode='HTML',
                                                reply_markup=Bt.ReplyKeyboardRemove())
    elif lang == 'ru':
        await bot.send_message(message.chat.id, '<b>–ö–æ–º–∞–Ω–¥—ã</b>\n/about - –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞\n'
                                                '/language - –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫\n'
                                                '/time - –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è\n'
                                                '/list -C–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n', parse_mode='HTML',
                                                reply_markup=Bt.ReplyKeyboardRemove())
    else:
        await bot.send_message(message.chat.id, '<b>Commands</b>\n/about - How to use bot\n'
                                                '/language - Select Language\n'
                                                '/time - Choose a time\n'
                                                '/list - Cryptocurrency list\n', parse_mode='HTML',
                                                reply_markup=Bt.ReplyKeyboardRemove())


@dp.message_handler(commands='language')
async def language(message: types.Message):
    global check, check2
    await bot.delete_message(message.from_user.id, message.message_id)
    if check2 == '':
        if lang == 'ukr':
            await bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É', reply_markup=Bt.LanguageMenu)
        elif lang == 'ru':
            await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫', reply_markup=Bt.LanguageMenu)
        else:
            await bot.send_message(message.chat.id, 'Choice language', reply_markup=Bt.LanguageMenu)
        check = 'language'
        check2 = 'language'
    else:
        pass


@dp.message_handler(commands='list')
async def setlist(message: types.Message):
    global check, check2
    check, check2 = '', ''
    await bot.send_message(message.chat.id, '‚ú®', reply_markup=Bt.ReplyKeyboardRemove())
    if lang == 'ukr':
        await bot.send_message(message.chat.id, '–í–∏–±–µ—Ä—ñ—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É', reply_markup=Bt.ListMenu)
    elif lang == 'ru':
        await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É', reply_markup=Bt.ListMenu)
    else:
        await bot.send_message(message.chat.id, 'Choice cryptocurrency', reply_markup=Bt.ListMenu)


@dp.callback_query_handler(text_contains="cc_")
async def crypt(call: types.CallbackQuery):
    global k, cc_list, cc_list1
    if call.data != 'cc_all' and call.data != 'cc_remove':
        currency = str(call.data[3:])
        price = cg.get_price(ids=currency, vs_currencies='usd')[currency]['usd']
        await bot.delete_message(call.from_user.id, call.message.message_id)
        await bot.delete_message(call.from_user.id, call.message.message_id-1)
        for i in range(3):
            for j in range(5):
                name = Bt.ListMenu["inline_keyboard"][i][j]['text']
                if call.data == Bt.ListMenu["inline_keyboard"][i][j]['callback_data']:
                    if name[len(name)-1] == '‚úÖ':
                        k = k - 1
                        cc_list.remove(name.replace('‚úÖ', ''))
                        cc_list1.remove(price)
                        Bt.ListMenu["inline_keyboard"][i][j]['text'] = name.replace('‚úÖ', '')
                    else:
                        k = k + 1
                        cc_list.append(name)
                        cc_list1.append(price)
                        Bt.ListMenu["inline_keyboard"][i][j]['text'] = f"{name}‚úÖ"
                    await bot.send_message(call.from_user.id, '‚ú®', reply_markup=Bt.ReplyKeyboardRemove())
                    if lang == 'ukr':
                        await bot.send_message(call.from_user.id, '–í–∏–±–µ—Ä—ñ—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É', reply_markup=Bt.ListMenu)
                    elif lang == 'ru':
                        await bot.send_message(call.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É', reply_markup=Bt.ListMenu)
                    else:
                        await bot.send_message(call.from_user.id, 'Choice cryptocurrency', reply_markup=Bt.ListMenu)
    else:
        await bot.delete_message(call.from_user.id, call.message.message_id)
        await bot.delete_message(call.from_user.id, call.message.message_id - 1)
        await bot.send_message(call.from_user.id, 'wait...')
        for i in range(3):
            for j in range(5):
                sleep(0.5)
                currency = str(Bt.ListMenu["inline_keyboard"][i][j]['callback_data'][3:])
                price = cg.get_price(ids=currency, vs_currencies='usd')[currency]['usd']
                name = Bt.ListMenu["inline_keyboard"][i][j]['text']
                if call.data == 'cc_all' and name[len(name) - 1] != '‚úÖ':
                    k = k + 1
                    cc_list.append(name)
                    cc_list1.append(price)
                    Bt.ListMenu["inline_keyboard"][i][j]['text'] = f"{name}‚úÖ"
                elif call.data == 'cc_remove' and name[len(name) - 1] == '‚úÖ':
                    k = k - 1
                    name = name.replace('‚úÖ', '')
                    cc_list.remove(name)
                    cc_list1.remove(price)
                    Bt.ListMenu["inline_keyboard"][i][j]['text'] = name
        await bot.delete_message(call.from_user.id, call.message.message_id + 1)
        await bot.send_message(call.from_user.id, '‚ú®', reply_markup=Bt.ReplyKeyboardRemove())
        if lang == 'ukr':
            await bot.send_message(call.from_user.id, '–í–∏–±–µ—Ä—ñ—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É', reply_markup=Bt.ListMenu)
        elif lang == 'ru':
            await bot.send_message(call.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É', reply_markup=Bt.ListMenu)
        else:
            await bot.send_message(call.from_user.id, 'Choice cryptocurrency', reply_markup=Bt.ListMenu)


@dp.callback_query_handler(text_contains="back")
async def crypt(call: types.CallbackQuery):
    global k, cc_list, cc_list1
    if call.data == 'back':
        for i in range(2):
            await bot.delete_message(call.from_user.id, call.message.message_id-i)
    elif call.data == 'back_send' and cc_list != []:
        for i in range(2):
            await bot.delete_message(call.from_user.id, call.message.message_id-i)
        short = ''
        for o in range(k):
            short = short + f'{cc_list[o]} - {cc_list1[o]} USD\n'
        await bot.send_message(call.from_user.id, short)
        for i in range(3):
            for j in range(5):
                name = Bt.ListMenu["inline_keyboard"][i][j]['text']
                if name[len(name) - 1] == '‚úÖ':
                    Bt.ListMenu["inline_keyboard"][i][j]['text'] = name.replace('‚úÖ', '')
        k = 0
        cc_list, cc_list1 = [], []



@dp.message_handler()
async def answer(message: types.Message):
    global check, lang, check2
    if check == 'language':
        if message.text == '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞üá∫üá¶':
            await bot.send_message(message.chat.id, '–ú–æ–≤–∞ –æ–±—Ä–∞–Ω–∞üá∫üá¶', reply_markup=Bt.ReplyKeyboardRemove())
            lang, check, check2 = 'ukr', '', ''
        elif message.text == '–†—É—Å—Å–∫–∏–πüá∑üá∫':
            await bot.send_message(message.chat.id, '–Ø–∑—ã–∫ –≤—ã–±—Ä–∞–Ωüá∑üá∫', reply_markup=Bt.ReplyKeyboardRemove())
            lang, check, check2 = 'ru', '', ''
        elif message.text == 'Englishüá¨üáß':
            await bot.send_message(message.chat.id, 'Language selectedüá¨üáß', reply_markup=Bt.ReplyKeyboardRemove())
            lang, check, check2 = 'eng', '', ''
        elif message.text == '‚¨ÖÔ∏è':
            await bot.delete_message(message.from_user.id, message.message_id)
            await bot.delete_message(message.from_user.id, message.message_id-1)
            check, check2 = '', ''
            return
        else:
            await language(message)
        await bot.delete_message(message.from_user.id, message.message_id)
        await bot.delete_message(message.from_user.id, message.message_id-1)
        check = ''
    elif check == '':
        await commands(message)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
