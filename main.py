from aiogram import Bot, Dispatcher, executor, types
from time import strftime
import requests
import json
import logging
import asyncio
import Buttons as Bt
from config import TOKEN
from userdata import Database

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
data = Database()

url = 'https://api.coingecko.com/api/v3/simple/price?ids=&vs_currencies=usd'
big_dict = {
    'ukr': {'start': '–ü—Ä–∏–≤—ñ—Ç, —è JoiCryptoBot\n–©–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –º–æ—ó –∫–æ–º–∞–Ω–¥–∏ —Ç–∞ –ø–æ—á–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å, –Ω–∞–ø–∏—à—ñ—Ç—å /help',
            'help': '–ù–∞–ª–∞—à—Ç—É–π –º–æ–≤—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /language\n–í–≤–µ–¥–∏ /list —â–æ–± –æ–±—Ä–∞—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏\n'
                    '1 –∫–ª—ñ–∫ - –û–±—Ä–∞—Ç–∏\n2 –∫–ª—ñ–∫ - –í–∏–¥–∞–ª–∏—Ç–∏\nALL‚ûï - –û–±—Ä–∞—Ç–∏ –≤—Å–µ\n'
                    'ALL‚ûñ - –û—á–∏—Å—Ç–∏—Ç–∏ —Å–ø–∏—Å–æ–∫\nüìà - –í–∏–≤–µ—Å—Ç–∏ –∫—É—Ä—Å\n‚¨ÖÔ∏è - –í–∏–π—Ç–∏ –∑ –º–µ–Ω—é\n'
                    '–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å –ª–∏—à–µ –æ–¥–Ω–æ—ó –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏ - /one\n\n'
                    '<b>–Ø–∫ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∫—É—Ä—Å –æ–±—Ä–∞–Ω–∏—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç?</b>\n'
                    '–í–≤–µ–¥—ñ—Ç—å /edit, –ø–æ—Ç—ñ–º –∑–º—ñ–Ω—ñ—Ç—å —Å–ø–∏—Å–æ–∫ —ñ —á–∞—Å—Ç–æ—Ç—É –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ç–∞ —É–≤—ñ–º–∫–Ω—ñ—Ç—å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è\n'
                    'üìÇ - –ó–º—ñ–Ω–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n'
                    'üïë - –ó–º—ñ–Ω–∏—Ç–∏ —á–∞—Å—Ç–æ—Ç—É\n'
                    '‚úÖ - –£–≤—ñ–º–∫–Ω—É—Ç–∏\n'
                    'üö´ - –í–∏–º–∫–Ω—É—Ç–∏\n'
                    '‚¨ÖÔ∏è - –í–∏–π—Ç–∏ –∑ –º–µ–Ω—é\n'
                    '–ö—É—Ä—Å –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É\n'
                    '/commands - –£—Å—ñ –∫–æ–º–∞–Ω–¥–∏\n',
            'commands': '<b>–ö–æ–º–∞–Ω–¥–∏</b>\n/help - –Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –±–æ—Ç–∞\n/language - –û–±—Ä–∞—Ç–∏ –º–æ–≤—É\n'
                        '/list - C–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n/one - –û–±—Ä–∞—Ç–∏ –æ–¥–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É\n'
                        '/edit - –ó–º—ñ–Ω–∏—Ç–∏ —à–≤–∏–¥–∫–∏–π —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç',
            'list': '–û–±–µ—Ä—ñ—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏',
            'one': '–û–±–µ—Ä—ñ—Ç—å 1 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É',
            'edit': ['C–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:', '–ß–∞—Å—Ç–æ—Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:', 'C—Ç–∞—Ç—É—Å:'],
            'status': ['–í–∏–º–∫–Ω—É—Ç–æüö´', '–£–≤—ñ–º–∫–Ω—É—Ç–æ‚úÖ'],
            'setlist': '–û–±–µ—Ä—ñ—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏',
            'settime': '–û–±–µ—Ä—ñ—Ç—å —á–∞—Å—Ç–æ—Ç—É',
            'wait': '–ü–æ—á–µ–∫–∞–π—Ç–µ 5 —Å–µ–∫...',
            'quick': '–£–≤—ñ–º–∫–Ω—ñ—Ç—å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è /edit',
            'language': '–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É',
            'choice': '–ú–æ–≤–∞ –æ–±—Ä–∞–Ω–∞üá∫üá¶',
            'times': [['—Ö–≤', '—Ö–≤', '—Ö–≤'], ['—Ö–≤', '–≥–æ–¥', '–≥–æ–¥'], ['–≥–æ–¥', '–≥–æ–¥', '–≥–æ–¥']],
            'lang_time': {'10': ' —Ö–≤', '15': ' —Ö–≤', '20': ' —Ö–≤', '30': ' —Ö–≤',
                          '1 ': '–≥–æ–¥', '3 ': '–≥–æ–¥', '6 ': '–≥–æ–¥', '12': ' –≥–æ–¥', '24': ' –≥–æ–¥'}
            },
    'rus': {'start': '–ü—Ä–∏–≤–µ—Ç, —è JoiCryptoBot\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ /help',
            'help': '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —è–∑—ã–∫ —Å –ø–æ–º–æ—â—å—é /language\n–í–≤–µ–¥–∏—Ç–µ /list —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n'
                    '1 –∫–ª–∏–∫ ‚Äì –í—ã–±—Ä–∞—Ç—å\n2 –∫–ª–∏–∫ - –£–¥–∞–ª–∏—Ç—å\nALL‚ûï - –í—ã–±—Ä–∞—Ç—å –≤—Å–µ\n'
                    'ALL‚ûñ - –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫\nüìà - –í—ã–≤–µ—Å—Ç–∏ –∫—É—Ä—Å\n‚¨ÖÔ∏è - –í—ã–π—Ç–∏ –∏–∑ –º–µ–Ω—é\n'
                    '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã - /one\n\n'
                    '<b>–ö–∞–∫ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∫—É—Ä—Å –≤—ã–±—Ä–∞–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç?</b>\n'
                    '–í–≤–µ–¥–∏—Ç–µ /edit –ø–æ—Ç–æ–º –≤—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏ —á–∞—Å—Ç–æ—Ç—É, –∑–∞—Ç–µ–º –≤–∫–ª—é—á–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É\n'
                    'üìÇ - –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n'
                    'üïë - –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É\n'
                    '‚úÖ - –í–∫–ª—é—á–∏—Ç—å\n'
                    'üö´ - –í—ã–∫–ª—é—á–∏—Ç—å\n'
                    '‚¨ÖÔ∏è - –í—ã–π—Ç–∏ –∏–∑ –º–µ–Ω—é\n'
                    '–ö—É—Ä—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É\n'
                    '/commands - –í—Å–µ –∫–æ–º–∞–Ω–¥—ã\n',
            'commands': '<b>–ö–æ–º–∞–Ω–¥—ã</b>\n/help - –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞\n/language - –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫\n'
                        '/list - C–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n/one - –í—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É\n'
                        '/edit - –ò–∑–º–µ–Ω–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n',
            'list': '–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏–∏',
            'one': '–í—ã–±–µ—Ä–∏—Ç–µ 1 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É',
            'edit': ['–°–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:', '–ß–∞—Å—Ç–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', 'C—Ç–∞—Ç—É—Å:'],
            'status': ['–í—ã–∫–ª—é—á–µ–Ωüö´', '–í–∫–ª—é—á–µ–Ω‚úÖ'],
            'setlist': '–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏',
            'settime': '–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É',
            'wait': '–ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫...',
            'quick': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∫–ª—é—á–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É /edit',
            'language': '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫',
            'choice': '–Ø–∑—ã–∫ –≤—ã–±—Ä–∞–Ωüá∑üá∫',
            'times': [['–º', '–º', '–º'], ['–º', '—á', '—á'], ['—á', '—á', '—á']],
            'lang_time': {'10': ' –º', '15': ' –º', '20': ' –º', '30': ' –º',
                          '1 ': '—á', '3 ': '—á', '6 ': '—á', '12': ' —á', '24': ' —á'}
            },
    'eng': {'start': 'Hi, I am JoiCryptoBot\nTo know my commands and start using me, tap /help',
            'help': 'Set the language using /language\nEnter /list to select the desired cryptocurrencies\n'
                    '1 click - Select\n2 click - Delete\nALL‚ûï - Select all\n'
                    'ALL‚ûñ - Clear the list\nüìà - Display exchange rate\n‚¨ÖÔ∏è - Quit menu\n'
                    'If you want to choice only one cryptocurrency - /one\n\n'
                    '<b>How to get the cryptocurrencies exchange rate constantly?</b>\n'
                    'Enter /edit then set list and frequency, turn status on\n'
                    'üìÇ - To set list\n'
                    'üïë - To set frequency\n'
                    '‚úÖ - Turn on\n'
                    'üö´ - Turn off\n'
                    '‚¨ÖÔ∏è - Quit menu\n'
                    '/commands - All commands\n',
            'commands': '<b>Commands</b>\n/help - How to use bot\n/language - Select Language\n'
                        '/list - Cryptocurrency list\n/one - Choice one cryptocurrency\n/edit - Set quick list\n',
            'list': 'Choice cryptocurrency',
            'one': 'Choice 1 cryptocurrency',
            'edit': ['Cryptocurrency list:', 'Send frequency:', 'Status:'],
            'status': ['Turn offüö´', 'Turn on‚úÖ'],
            'setlist': 'Choice cryptocurrencies',
            'settime': 'Choice frequency',
            'wait': 'Wait 5 sec...',
            'quick': 'Turn on sending /edit',
            'language': 'Choice language',
            'choice': 'Language selectedüá¨üáß',
            'times': [['min', 'min', 'min'], ['min', 'hr', 'hr'], ['hr', 'hr', 'hr']],
            'lang_time': {'10': ' min', '15': ' min', '20': ' min', '30': ' min',
                          '1 ': 'hr', '3 ': 'hr', '6 ': 'hr', '12': ' hr', '24': ' hr'}
            }}
names_dict = {'BTC': 'Bitcoin', 'ETH': 'Ethereum', 'BNB': 'Binance Coin', 'LTC': 'Litecoin', 'DOGE': 'Dogecoin',
              'XRP': 'Ripple', 'ADA': 'Cardano', 'SOL': 'Solana', 'DOT': 'Polkadot', 'TRX': 'Tron',
              'LINK': 'Chainlink', 'NEAR': 'Near Protocol', 'MATIC': 'Polygon', 'ATOM': 'Cosmos',
              'AVAX': 'Avalanche', 'UNI': 'Uniswap'}
cc_list = ['bitcoin', 'ethereum', 'binancecoin', 'litecoin', 'dogecoin', 'ripple', 'cardano',
           'solana', 'polkadot', 'tron', 'chainlink', 'near', 'matic-network',
           'cosmos', 'avalanche-2', 'uniswap']
cc_list_names = {'bitcoin': 'BTC', 'ethereum': 'ETH', 'binancecoin': 'BNB', 'litecoin': 'LTC',
                 'dogecoin': 'DOGE', 'ripple': 'XRP', 'cardano': 'ADA', 'solana': 'SOL',
                 'polkadot': 'DOT', 'tron': 'TRX', 'chainlink': 'LINK', 'near': 'NEAR',
                 'matic-network': 'MATIC', 'cosmos': 'ATOM', 'avalanche-2': 'AVAX', 'uniswap': 'UNI'}
cc_price_list = {}
time_buttons = [['üîü', '1Ô∏è‚É£5Ô∏è‚É£', '2Ô∏è‚É£0Ô∏è‚É£'], ['3Ô∏è‚É£0Ô∏è‚É£', '1Ô∏è‚É£', '3Ô∏è‚É£'], ['6Ô∏è‚É£', '1Ô∏è‚É£2Ô∏è‚É£', '2Ô∏è‚É£4Ô∏è‚É£']]
time_buttons1 = [['10', '15', '20'], ['30', '1', '3'], ['6', '12', '24']]


@dp.message_handler(commands=['start', 'help', 'commands', 'language', 'one', 'list', 'edit'])
async def commands(message: types.Message):
    if message.chat.type == 'private':
        data.add_user(user_id=message.from_user.id)
        language = data.get_data(user_id=message.from_user.id, target='language')
        status = data.get_data(user_id=message.from_user.id, target='switch')
        await message.delete()
        if message.text[1:] == 'one':
            await message.answer('‚ú®')
            await message.answer(big_dict[language][message.text[1:]], reply_markup=Bt.OneListMenu)
        elif message.text[1:] == 'language':
            await message.answer('‚ú®')
            await message.answer(big_dict[language][message.text[1:]], reply_markup=Bt.LanguageMenu)
        elif message.text[1:] == 'list':
            cc_name_list = data.get_data(user_id=message.from_user.id, target='list_0')
            for i in range(4):
                for j in range(4):
                    name = Bt.ListMenu["inline_keyboard"][i][j]['text']
                    if name.replace('‚úÖ', '') in cc_name_list:
                        Bt.ListMenu["inline_keyboard"][i][j]['text'] = f"{name.replace('‚úÖ', '')}‚úÖ"
                    else:
                        Bt.ListMenu["inline_keyboard"][i][j]['text'] = name.replace('‚úÖ', '')
            await message.answer('‚ú®')
            await message.answer(big_dict[language][message.text[1:]], reply_markup=Bt.ListMenu)
        elif message.text[1:] == 'edit':
            full_list = data.get_data(user_id=message.from_user.id, target='full_list')
            time = data.get_data(user_id=message.from_user.id, target='time')
            if time != '':
                data.change_time(user_id=message.from_user.id, time=time[:2]+big_dict[language]['lang_time'][time[:2]])
                time = data.get_data(user_id=message.from_user.id, target='time')
            await message.answer('‚ú®')
            if status == 0:
                await bot.send_message(message.from_user.id,
                                       f"{big_dict[language]['edit'][0]} {full_list}\n"
                                       f"{big_dict[language]['edit'][1]} {time}\n"
                                       f"{big_dict[language]['edit'][2]} {big_dict[language]['status'][status]}",
                                       reply_markup=Bt.SetMenu)
            else:
                await bot.send_message(message.from_user.id,
                                       f"{big_dict[language]['edit'][0]} {full_list}\n"
                                       f"{big_dict[language]['edit'][1]} {time}\n"
                                       f"{big_dict[language]['edit'][2]} {big_dict[language]['status'][status]}",
                                       reply_markup=Bt.StopMenu)
        else:
            await message.answer(big_dict[language][message.text[1:]], parse_mode='HTML')


@dp.message_handler()
async def delete(message: types.Message):
    if message.chat.type == 'private':
        await message.delete()


@dp.callback_query_handler(text_contains="cc_")
async def callback_cc(call: types.CallbackQuery):
    language = data.get_data(user_id=call.from_user.id, target='language')
    cc_name_list = data.get_data(user_id=call.from_user.id, target='list_0')
    cc_set_list = data.get_data(user_id=call.from_user.id, target='list')
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.delete_message(call.from_user.id, call.message.message_id - 1)
    if call.data[:4] == 'cc_1':
        for i in range(4):
            for j in range(4):
                name = Bt.ListMenu["inline_keyboard"][i][j]['text']
                if name.replace('‚úÖ', '') in cc_name_list:
                    Bt.ListMenu["inline_keyboard"][i][j]['text'] = f"{name.replace('‚úÖ', '')}‚úÖ"
                else:
                    Bt.ListMenu["inline_keyboard"][i][j]['text'] = name.replace('‚úÖ', '')
        for i in range(4):
            for j in range(4):
                name = Bt.ListMenu["inline_keyboard"][i][j]['text']
                if (call.data == 'cc_1_all' and name[len(name) - 1] != '‚úÖ') or \
                   (call.data == Bt.ListMenu["inline_keyboard"][i][j]['callback_data'] and name[len(name) - 1] != '‚úÖ'):
                    data.change_list_0(user_id=call.from_user.id, list_0=name, target='+')
                    Bt.ListMenu["inline_keyboard"][i][j]['text'] = f"{name}‚úÖ"
                elif (call.data == 'cc_1_remove' and name[len(name) - 1] == '‚úÖ') or \
                     (call.data == Bt.ListMenu["inline_keyboard"][i][j]['callback_data'] and name[len(name) - 1] == '‚úÖ'):
                    data.change_list_0(user_id=call.from_user.id, list_0=name.replace('‚úÖ', ''), target='-')
                    Bt.ListMenu["inline_keyboard"][i][j]['text'] = name.replace('‚úÖ', '')
        await bot.send_message(call.from_user.id, '‚ú®')
        await bot.send_message(call.from_user.id, big_dict[language]['list'], reply_markup=Bt.ListMenu)
    elif call.data[:4] == 'cc_3':
        for i in range(4):
            for j in range(4):
                name = Bt.SetListMenu["inline_keyboard"][i][j]['text']
                if name.replace('‚úÖ', '') in cc_set_list:
                    Bt.SetListMenu["inline_keyboard"][i][j]['text'] = f"{name.replace('‚úÖ', '')}‚úÖ"
                else:
                    Bt.SetListMenu["inline_keyboard"][i][j]['text'] = name.replace('‚úÖ', '')
        for i in range(4):
            for j in range(4):
                name = Bt.SetListMenu["inline_keyboard"][i][j]['text']
                if (call.data == 'cc_3_all' and name[len(name) - 1] != '‚úÖ') or \
                   (call.data == Bt.SetListMenu["inline_keyboard"][i][j]['callback_data'] and name[len(name) - 1] != '‚úÖ'):
                    data.change_list(user_id=call.from_user.id, new=name, target='+')
                    Bt.SetListMenu["inline_keyboard"][i][j]['text'] = f"{name}‚úÖ"
                elif (call.data == 'cc_3_remove' and name[len(name) - 1] == '‚úÖ') or \
                     (call.data == Bt.SetListMenu["inline_keyboard"][i][j]['callback_data'] and name[len(name) - 1] == '‚úÖ'):
                    data.change_list(user_id=call.from_user.id, new=name.replace('‚úÖ', ''), target='-')
                    Bt.SetListMenu["inline_keyboard"][i][j]['text'] = name.replace('‚úÖ', '')
        await bot.send_message(call.from_user.id, '‚ú®')
        await bot.send_message(call.from_user.id, big_dict[language]['list'], reply_markup=Bt.SetListMenu)
    elif call.data[:4] == 'cc_2':
        for i in range(4):
            for j in range(4):
                name = Bt.OneListMenu["inline_keyboard"][i][j]['text']
                if call.data == Bt.OneListMenu["inline_keyboard"][i][j]['callback_data']:
                    await bot.send_message(call.from_user.id, f'{name} ({names_dict[name]}) - <u>{cc_price_list[name]}</u> USD\n',
                                           parse_mode='HTML')
                    break


@dp.callback_query_handler(text_contains="back")
async def callback_back(call: types.CallbackQuery):
    cc_name_list = data.get_data(user_id=call.from_user.id, target='list_0')
    language = data.get_data(user_id=call.from_user.id, target='language')
    full_list = data.get_data(user_id=call.from_user.id, target='full_list')
    status = data.get_data(user_id=call.from_user.id, target='switch')
    time = data.get_data(user_id=call.from_user.id, target='time')
    if call.data == 'back':
        await bot.delete_message(call.from_user.id, call.message.message_id)
        await bot.delete_message(call.from_user.id, call.message.message_id - 1)
    elif call.data == 'back_2':
        await bot.delete_message(call.from_user.id, call.message.message_id)
        await bot.delete_message(call.from_user.id, call.message.message_id - 1)
        await bot.send_message(call.from_user.id, '‚ú®')
        await bot.send_message(call.from_user.id, f"{big_dict[language]['edit'][0]} {full_list}\n"
                                                  f"{big_dict[language]['edit'][1]} {time}\n"
                                                  f"{big_dict[language]['edit'][2]} {big_dict[language]['status'][status]}",
                               reply_markup=Bt.SetMenu)
    elif call.data == 'back_set_list':
        await bot.delete_message(call.from_user.id, call.message.message_id)
        await bot.delete_message(call.from_user.id, call.message.message_id - 1)
        await bot.send_message(call.from_user.id, '‚ú®')
        await bot.send_message(call.from_user.id, f"{big_dict[language]['edit'][0]} {full_list}\n"
                                                  f"{big_dict[language]['edit'][1]} {time}\n"
                                                  f"{big_dict[language]['edit'][2]} {big_dict[language]['status'][status]}",
                               reply_markup=Bt.SetMenu)
    elif call.data == 'back_set' and full_list != '' and status == 0:
        await bot.delete_message(call.from_user.id, call.message.message_id)
        await bot.delete_message(call.from_user.id, call.message.message_id - 1)
        data.change_switch(user_id=call.from_user.id, target=1)
        data.change_set_time(user_id=call.from_user.id, time=strftime("%H:%M"))
        status = data.get_data(user_id=call.from_user.id, target='switch')
        await bot.send_message(call.from_user.id, '‚ú®')
        await bot.send_message(call.from_user.id, f"{big_dict[language]['edit'][0]} {full_list}\n"
                                                  f"{big_dict[language]['edit'][1]} {time}\n"
                                                  f"{big_dict[language]['edit'][2]} {big_dict[language]['status'][status]}",
                               reply_markup=Bt.StopMenu)
    elif call.data == 'back_stop' and status == 1:
        await bot.delete_message(call.from_user.id, call.message.message_id)
        await bot.delete_message(call.from_user.id, call.message.message_id - 1)
        data.change_switch(user_id=call.from_user.id, target=0)
        data.change_set_time(user_id=call.from_user.id, time="")
        status = data.get_data(user_id=call.from_user.id, target='switch')
        await bot.send_message(call.from_user.id, '‚ú®')
        await bot.send_message(call.from_user.id, f"{big_dict[language]['edit'][0]} {full_list}\n"
                                                  f"{big_dict[language]['edit'][1]} {time}\n"
                                                  f"{big_dict[language]['edit'][2]} {big_dict[language]['status'][status]}",
                               reply_markup=Bt.SetMenu)
    elif call.data == 'back_send' and cc_name_list != []:
        await bot.delete_message(call.from_user.id, call.message.message_id)
        await bot.delete_message(call.from_user.id, call.message.message_id - 1)
        for i in range(4):
            for j in range(4):
                name = Bt.ListMenu["inline_keyboard"][i][j]['text']
                if name[len(name) - 1] == '‚úÖ':
                    Bt.ListMenu["inline_keyboard"][i][j]['text'] = name.replace('‚úÖ', '')
        full_list = ''
        for i in range(len(cc_name_list)):
            full_list = full_list + f'{cc_name_list[i]} ({names_dict[cc_name_list[i]]}) - ' \
                                    f'<u>{cc_price_list[cc_name_list[i]]}</u> USD\n'
        await bot.send_message(call.from_user.id, full_list, parse_mode='HTML')
        data.clear_data(user_id=call.from_user.id, target='list_0')


@dp.callback_query_handler(text_contains="set_")
async def callback_set(call: types.CallbackQuery):
    language = data.get_data(user_id=call.from_user.id, target='language')
    cc_set_list = data.get_data(user_id=call.from_user.id, target='list')
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.delete_message(call.from_user.id, call.message.message_id - 1)
    await bot.send_message(call.from_user.id, '‚ú®')
    if call.data == 'set_list':
        for i in range(4):
            for j in range(4):
                name = Bt.SetListMenu["inline_keyboard"][i][j]['text']
                if name.replace('‚úÖ', '') in cc_set_list:
                    Bt.SetListMenu["inline_keyboard"][i][j]['text'] = f"{name.replace('‚úÖ', '')}‚úÖ"
                else:
                    Bt.SetListMenu["inline_keyboard"][i][j]['text'] = name.replace('‚úÖ', '')
        await bot.send_message(call.from_user.id, big_dict[language]['setlist'], reply_markup=Bt.SetListMenu)
    elif call.data == 'set_time':
        for i in range(3):
            for j in range(3):
                Bt.SetTimeMenu["inline_keyboard"][i][j]['text'] = time_buttons[i][j] + big_dict[language]['times'][i][j]
                Bt.SetTimeMenu["inline_keyboard"][i][j]['callback_data'] = f"time_{time_buttons1[i][j]} {big_dict[language]['times'][i][j]}"
        await bot.send_message(call.from_user.id, big_dict[language]['settime'], reply_markup=Bt.SetTimeMenu)


@dp.callback_query_handler(text_contains="time_")
async def callback_time(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.delete_message(call.from_user.id, call.message.message_id - 1)
    language = data.get_data(user_id=call.from_user.id, target='language')
    status = data.get_data(user_id=call.from_user.id, target='switch')
    full_list = data.get_data(user_id=call.from_user.id, target='full_list')
    data.change_time(user_id=call.from_user.id, time=call.data[5:])
    time = data.get_data(user_id=call.from_user.id, target='time')
    await bot.send_message(call.from_user.id, '‚ú®')
    await bot.send_message(call.from_user.id, f"{big_dict[language]['edit'][0]} {full_list}\n"
                                              f"{big_dict[language]['edit'][1]} {time}\n"
                                              f"{big_dict[language]['edit'][2]} {big_dict[language]['status'][status]}",
                           reply_markup=Bt.SetMenu)


@dp.callback_query_handler(text_contains="lang")
async def callback_lang(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.delete_message(call.from_user.id, call.message.message_id - 1)
    data.change_language(user_id=call.from_user.id, language=call.data[5:])
    language = data.get_data(user_id=call.from_user.id, target='language')
    await bot.send_message(call.from_user.id, big_dict[language]['choice'])


def big_time_dict(time: str, set_time: str):
    a = []
    if time == "10":
        a = ["00:" + str(i) for i in [int(set_time[3:])] + [int(set_time[3:]) + (int(time[:2]) * i) for i in range(1, 6)]]
        for j in range(1, 24):
            a = a + [f"{j}:" + str(i) for i in [int(set_time[3:])] + [int(set_time[3:]) + (int(time[:2]) * i) for i in range(1, 6)]]
    elif time == "15":
        a = ["00:" + str(i) for i in [int(set_time[3:])] + [int(set_time[3:]) + (int(time[:2]) * i) for i in range(1, 4)]]
        for j in range(1, 24):
            a = a + [f"{j}:" + str(i) for i in [int(set_time[3:])] + [int(set_time[3:]) + (int(time[:2]) * i) for i in range(1, 4)]]
    elif time == "20":
        a = ["00:" + str(i) for i in [int(set_time[3:])] + [int(set_time[3:]) + (int(time[:2]) * i) for i in range(1, 3)]]
        for j in range(1, 24):
            a = a + [f"{j}:" + str(i) for i in [int(set_time[3:])] + [int(set_time[3:]) + (int(time[:2]) * i) for i in range(1, 3)]]
    elif time == "30":
        a = ["00:" + str(i) for i in [int(set_time[3:])] + [int(set_time[3:]) + (int(time[:2]) * i) for i in range(1, 2)]]
        for j in range(1, 24):
            a = a + [f"{j}:" + str(i) for i in [int(set_time[3:])] + [int(set_time[3:]) + (int(time[:2]) * i) for i in range(1, 2)]]
    elif time == "1 ":
        a = [f"{i}:" + set_time[3:] for i in range(24)]
    elif time == "3 ":
        a = [f"{int(set_time[:2]) + 3 * i}:" + set_time[3:] for i in range(8)]
    elif time == "6 ":
        a = [f"{int(set_time[:2]) + 6 * i}:" + set_time[3:] for i in range(4)]
    elif time == "12":
        a = [f"{int(set_time[:2]) + 12 * i}:" + set_time[3:] for i in range(2)]
    elif time == "24":
        a = [set_time]
    for i in range(len(a)):
        if a[i][2] != ':':
            a[i] = "0" + a[i]
        if int(a[i][:2]) > 23:
            a[i] = str(int(a[i][:2]) - 24) + a[i][2:]
            if a[i][2] != ':':
                a[i] = "0" + a[i]
        if int(a[i][3:]) > 59:
            a[i] = a[i][:3] + str(int(a[i][3:]) - 60)
        if len(a[i]) != 5:
            a[i] = a[i][:3] + "0" + a[i][3]
    return a


async def always():
    while True:
        global cc_price_list
        cc_price_list = {}
        for cc in cc_list:
            url1 = url[:50] + cc + url[50:]
            rq = requests.Session().get(url1, timeout=120)
            rq.raise_for_status()
            cc_price_list[cc_list_names[cc]] = json.loads(rq.content.decode('utf-8'))[cc]['usd']
        if data.get_data_all() != 0:
            for elements in data.get_data_all():
                time = data.get_data(user_id=elements, target='time')[:2]
                set_time = data.get_data(user_id=elements, target='set_time')
                if strftime("%H:%M") in big_time_dict(time, set_time):
                    cc_set_list = data.get_data(user_id=elements, target='list')
                    full_list1 = ''
                    for i in range(len(cc_set_list)):
                        full_list1 = full_list1 + f'{cc_set_list[i]} ({names_dict[cc_set_list[i]]}) - ' \
                                                  f'<u>{cc_price_list[cc_set_list[i]]}</u> USD\n'
                    await bot.send_message(elements, full_list1, parse_mode='HTML')
        await asyncio.sleep(60)

if __name__ == '__main__':
    data.init_db()
    asyncio.gather(always())
    executor.start_polling(dp, skip_updates=True)
